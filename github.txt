1.本地创建ssh key: ssh-keygen -t rsa -C "email addrss"(询问密码时一路回车)
打开~/.ssh下的id_rsa.pub,复制内容

2.进入github账户主页setting ,SSH keys ,add ssh key,粘贴ssh key

3.ssh -T git@github.com (验证是否成功)
如:You've successfully authenticated, but GitHub does not provide shell access;表示成功

################################################################

4.git bare init 创建一个本地仓库
git config --global user.name "用户名"
git config --global user.email "注册邮箱"

5.进入本地库,添加远程地址:git remote add origin 远程仓库ssh地址

6.git add filename 
git add *
加入暂存区

git commit -m "提交信息"
加入HEAD

git push origin master或其他分支
推送至远程服仓库




################################################################
从现有仓库克隆

    git remote add origin git_address   
       #git_address即现有仓库的地址
       #如 git@github.com:TimorChow/baike_spider
    git push -u origin master



################################################################
 分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是"默认的"分支。在其他分支上进行开发，完成后再将它们合并到主分支上。
branches

创建一个叫做"feature_x"的分支，并切换过去：
git checkout -b feature_x
切换回主分支：
git checkout master
再把新建的分支删掉：
git branch -d feature_x
除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：
git push origin <branch> 



################################################################
更新与合并

要更新你的本地仓库至最新改动，执行：
git pull
以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。
要合并其他分支到你的当前分支（例如 master），执行：
git merge <branch>
在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：
git add <filename>
在合并改动之前，你可以使用如下命令预览差异：
git diff <source_branch> <target_branch> 



###############################################################
因为远程repository和我本地的repository冲突导致的，而我在创建版本库后，在github的版本库页面点击了创建README.md文件的按钮创建了说明文档，但是却没有pull到本地。这样就产生了版本冲突的问题。

有如下几种解决方法：

1.使用强制push的方法：

$ git push -u origin master -f

这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。

2.push前先将远程repository修改pull下来

$ git pull origin master

$ git push -u origin master

3.若不想merge远程和本地修改，可以先创建新的分支：

$ git branch [name]

然后push

$ git push -u origin [name]